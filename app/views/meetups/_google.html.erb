<div id="map" class="google-map-canvas" style="background-color: lightgray"></div>


<script type="text/javascript">

	// this is called when the page loads. 
	// it initializes the map, and creates each marker

	$(document).ready(function()
	{  
		///////////////////////////////////////////////
		//  load the google map api if required      // 
		///////////////////////////////////////////////
		function loadScript(src,callback)
		{
			var script = document.createElement("script");
			script.type    = "text/javascript";
			script.charset = "UTF-8";
			
			if (callback) { script.onload = callback; }

			document.getElementsByTagName("head")[0].appendChild(script);
			script.src = src;
		}

		///////////////////////////////////////////////
        // check if the maps api script is already loaded
		var script_source   = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyD9GE8UaA4r9KWATXxIgzkOTti8pXp8fiA&callback=initializeMap';  
        var script_elements = document.head.getElementsByTagName('script');
        var script_found    = false;

		for (var i = 0; (!script_found) && (i < script_elements.length); i++)
		{
			//console.log(elements[i].src);
			if (script_elements[i].src == script_source)
			{
				script_found = true;
			}
		}

		if (script_found)
		{
		  initializeMap();
		}
		else
		{
		  loadScript(script_source, function(){ console.log('google-loader has been loaded, but not the maps-API ');});
		}
	});

	/////////////////////////////////////////////// 
	/////////////////////////////////////////////// 
    function initializeMap()
	{
		    console.log('maps-API has been loaded, ready to use');
			/////////////////////////////////////////////// 
		    var map          = null;
			var mapOptions   = null;
			var mapDraggable = true; 
	        var map_marker   = null;

			function resizeBootstrapMap() 
			{
			  // TODO walk the actual parent/s, rather than by class
			  var mapParentWidth  = $('.google-map-col').width();
			  var mapParentHeight = $('.google-map-row').height();
			  
			  console.log('resize map w=' + mapParentWidth + ' h=' + mapParentHeight);

			  $('#map').width(mapParentWidth);
			  $('#map').height(mapParentHeight);
			  google.maps.event.trigger($('#map'), 'resize');
            //map.fitBounds(mapBounds);
			}

	  		// Create a terrain style map
	  	    mapOptions = 
			{
		      mapTypeId: google.maps.MapTypeId.ROADMAP,
		      center: {lat: -23.881733, lng: 151.195264},
              zoom: 16,
			  draggable: mapDraggable,
		      scrollwheel: true,
		      zoomControl: true,
		      streetViewControl: true,
		      mapTypeControl: true,
		      panControl: true
		    };

			// The draggableControl adds a control to the map that controls the map's draggability
			// This constructor takes the control DIV as an argument @constructor
			function draggableControl(controlDiv, map) 
			{
				// Set CSS for the control border.
				var controlUI = document.createElement('div');
				
				controlUI.style.backgroundColor = '#fff';
				controlUI.style.border          = '2px solid #fff';
				controlUI.style.borderRadius    = '3px';
				controlUI.style.boxShadow       = '0 2px 6px rgba(0,0,0,.3)';
				controlUI.style.cursor          = 'pointer';
				controlUI.style.marginTop       = '10px';
			    controlUI.style.marginLeft      = '-9px';
				controlUI.style.textAlign       = 'center';
				controlUI.title                 = mapDraggable ? 'Click to lock the map' : 'Click to unlock the map';
				
				controlDiv.appendChild(controlUI);

				// Set CSS for the control interior.
				var controlText = document.createElement('div');
				
				controlText.style.color        = 'rgb(25,25,25)';
				controlText.style.fontSize     = '10px';
				controlText.style.lineHeight   = '27px';
				controlText.style.paddingLeft  = '5px';
				controlText.style.paddingRight = '5px';
				controlText.innerHTML          = mapDraggable ? 'Lock' : 'Unlock';
				
				controlUI.appendChild(controlText);

				// Setup the click event listeners
				controlUI.addEventListener('click', function() 
				{
				  mapDraggable = !mapDraggable;

				  controlUI.title       = mapDraggable ? 'Click to lock the map' : 'Click to unlock the map';
				  controlText.innerHTML = mapDraggable ? 'Lock' : 'Unlock'; 

				  map.setOptions({draggable: mapDraggable});
				});

			}

		    window.map = new google.maps.Map(document.getElementById("map"), mapOptions);

			// Create the DIV to hold the control and call the 
			// draggableControl() constructor passing in this DIV.
			var draggableControlDiv = document.createElement('div');
			var draggableControl = new draggableControl(draggableControlDiv, map);

			draggableControlDiv.index = 1;
			window.map.controls[google.maps.ControlPosition.TOP_LEFT].push(draggableControlDiv);

			/////////////////////////////////////////////////
			// map marker helper functions                 //
			/////////////////////////////////////////////////
            window.map_markers = Array();

            window.updateMarker = function(user)
			{
				var bFound     = false
				var map_marker = null;

				for (var i = 0; !bFound && (i < window.map_markers.length); i++)
				{
					map_marker = window.map_markers[i]

					if (map_marker.id == user.id)
					{
						bFound = true
						//console.log('users return/update - found matching marker - NOT adding new marker ' + user.username + ' ' + user.id);
					}          
			    }

				if (!bFound)
				{
					//console.log('users return/update - matching marker NOT found - adding new marker ' + user.username + ' ' + user.id);
					
					map_marker = new google.maps.Marker({
					map: window.map,
					draggable: true,
					title: user.username
					});

					map_marker.set('id', user.id);

					window.map_markers.push(map_marker);
				}
				
				///////////////////////////////////////////////////////////////
				google.maps.event.addListener(map_marker, 'dragend', function(event) 
				{
					var id  = this.get('id');
					var lat = event.latLng.lat();
					var lng = event.latLng.lng();
					
					var record = { user_id: id, latitude: lat, longitude: lng };
					var hdr = { to: 'server', from: App.endpoint_uuid, type: 'data', subtype: 'update', record: 'position' };
					var msg = { hdr: hdr, body: { position: record }
					};
				
				    App.positions.send_msg(msg);
				});

				///////////////////////////////////////////////////////////////
				google.maps.event.addListener(map_marker, 'drag', function(event) 
				{
					var hdr, id, lat, lng, msg, record;
					id = this.get('id');
					lat = event.latLng.lat();
					lng = event.latLng.lng();
					
					record = { user_id: id, latitude: lat, longitude: lng };
					hdr    = { to: 'server', from: App.endpoint_uuid, type: 'live_data', subtype: 'update',	record: 'position' };
					msg    = { hdr: hdr, body: { position: record }
					};
					
					App.positions.send_msg(msg);
				});
			};

			/////////////////////////////////////////////////
			/////////////////////////////////////////////////
			window.updateMarkerPosition = function(position)
			{
				var bFound     = false
				var map_marker = null;

				for (var i = 0; !bFound && (i < window.map_markers.length); i++)
				{
					map_marker = window.map_markers[i]

					if (map_marker.id == position.user_id)
					{
						bFound = true
						//console.log('positions return/update - found matching marker - updating position ' + map_marker.title + ' ' + position.user_id + ' ' + position.latitude + ' ' + position.longitude);
						newLatLng = new google.maps.LatLng(position.latitude, position.longitude);
						map_marker.setPosition(newLatLng);
					}          
				}

				if (!bFound)
				{
					//console.log('positions return/update - matching marker NOT found - NOT updating marker position ' + position.user_id + ' ' + position.latitude + ' ' + position.longitude);
				}
			};

            ///////////////////////////////////////////////////////////////////
			// get the current positions and setup markers for them          //
			// TODO do this thru the position channel rather than by AJAX    //
            ///////////////////////////////////////////////////////////////////
			$.getJSON('/positions/users_for_current_positions.json', function(response) {
			  return $.each(response, function(i, user) {
				window.updateMarker(user);
			  });
			});

			$.getJSON('/positions/current_positions.json', function(response) {
			  return $.each(response, function(i, position) {
				window.updateMarkerPosition(position);
			  });
			});

            ///////////////////////////////////////////////////////////////////
			// Try W3C Geolocation (Preferred)                               //
            ///////////////////////////////////////////////////////////////////
			if (navigator.geolocation) 
			{
				navigator.geolocation.getCurrentPosition(function(position) 
				{
				  initialLocation = new google.maps.LatLng(position.coords.latitude,position.coords.longitude);
					
				//console.log('position.coords.accuracy=' + position.coords.accuracy);

				  window.map.setCenter(initialLocation);

				  id  = "00000000-0000-0000-0000-000000000000";
				  lat = initialLocation.lat();
				  lng = initialLocation.lng();
				
				  record = { user_id: id, latitude: lat, longitude: lng };
				  hdr = { to: 'server', from: App.endpoint_uuid, type: 'data', subtype: 'update', record: 'position' };
				  msg = { hdr: hdr, body: { position: record }
				  };
			
				  App.positions.send_msg(msg);
				}, 
				function() { alert("Geolocation service failed."); } );

				///////////////////////////////////////////
                var options = {enableHighAccuracy:true, timeout:15000, maximumAge:1000};
                var watchID = navigator.geolocation.watchPosition(function(position) 
				{ 
				  id  = "00000000-0000-0000-0000-000000000000";
				  lat = position.coords.latitude;
				  lng = position.coords.longitude;
				
				//console.log('watchPosition reports ' + position.coords.latitude + ' ' + position.coords.longitude);

				  record = { user_id: id, latitude: lat, longitude: lng };
				  hdr = { to: 'server', from: App.endpoint_uuid, type: 'data', subtype: 'update', record: 'position' };
				  msg = { hdr: hdr, body: { position: record }
				  };
			
				  App.positions.send_msg(msg);
				}, 
				function(error) 
				{ 
					switch(error.code) 
					{
						case error.PERMISSION_DENIED:
							console.log('User denied the request for Geolocation.');
							alert(      'User denied the request for Geolocation.');
							break;
						case error.POSITION_UNAVAILABLE:
							console.log('Location information is unavailable.');
							alert(      'Location information is unavailable.');
							break;
						case error.TIMEOUT:
							console.log('The request to get user location timed out.');
							alert(      'The request to get user location timed out.');
							break;
						case error.UNKNOWN_ERROR:
						default:
							console.log('An unknown error occurred in the request for Geolocation.');
							alert(      'An unknown error occurred in the request for Geolocation.');
							break;
					} // switch(error.code)					
				}, 
				options );
					
			}
			else 
			{
			  alert("Your browser doesn't support geolocation.");
			}

			// resize the map on startup
		    resizeBootstrapMap();

		    // resize the map whenever the window resizes
			$(window).resize(resizeBootstrapMap);

			$('a[data-toggle="tab"]').on('shown.bs.tab', function(e) {
				console.log('WOOOOO');
			    resizeBootstrapMap();
			});
      }    
</script>                   

